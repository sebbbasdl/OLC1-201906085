package analizadores; 
import java_cup.runtime.*;
parser code 
{:
    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public Arbol getArbol() {
        return arbol;
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }
:} 

terminal String PTCOMA,PARIZQ,PARDER,CORIZQ,CORDER;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String ENTERO;
terminal String DECIMAL;
terminal String UMENOS;
terminal String REVALUAR;
terminal String T_INGRESAR;
terminal String T_ID;
terminal String T_COMO;
terminal String T_STRING;
terminal String T_CADENA;
terminal String T_CON_VALOR;



non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal Double expresion;
non terminal declaracion;

precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence right UMENOS; 

start with ini; 

ini::=instrucciones;

instrucciones ::= 
   instrucciones instruccion
 | instruccion
 | error instrucciones
; 

instruccion ::= 
    declaracion
    
;

declaracion ::=
    T_INGRESAR T_ID T_COMO T_STRING T_CADENA T_CON_VALOR
    
;