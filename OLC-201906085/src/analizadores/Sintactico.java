
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import Estructuras.Node;
import Estructuras.Arbol;
import Estructuras.Production;
import Estructuras.Instructions.Declaracion;
import Estructuras.Instructions.Operacion;
import Estructuras.Instructions.Instruccion;
import Estructuras.Instructions.Identacion;
import Estructuras.Instructions.If;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\011\000\002\005\011\000\002\005\011\000" +
    "\002\005\011\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\011\006\000\002\011" +
    "\011\000\002\011\010\000\002\010\007\000\002\010\006" +
    "\000\002\006\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\021\005\001\002\000\004\002\130\001" +
    "\002\000\010\004\007\005\011\037\014\001\002\000\012" +
    "\004\007\005\011\022\127\037\014\001\002\000\004\005" +
    "\105\001\002\000\020\004\ufffd\005\ufffd\022\ufffd\037\ufffd" +
    "\041\ufffd\042\ufffd\044\ufffd\001\002\000\004\023\074\001" +
    "\002\000\020\004\ufffe\005\ufffe\022\ufffe\037\ufffe\041\ufffe" +
    "\042\ufffe\044\ufffe\001\002\000\020\004\ufffc\005\ufffc\022" +
    "\ufffc\037\ufffc\041\ufffc\042\ufffc\044\ufffc\001\002\000\004" +
    "\005\015\001\002\000\016\035\042\036\041\045\046\046" +
    "\045\047\043\050\044\001\002\000\010\004\007\005\011" +
    "\037\014\001\002\000\016\004\007\005\011\037\014\041" +
    "\024\042\021\044\023\001\002\000\020\004\uffff\005\uffff" +
    "\022\uffff\037\uffff\041\uffff\042\uffff\044\uffff\001\002\000" +
    "\004\005\015\001\002\000\006\041\027\042\030\001\002" +
    "\000\020\004\ufff3\005\ufff3\022\ufff3\037\ufff3\041\ufff3\042" +
    "\ufff3\044\ufff3\001\002\000\010\004\007\005\011\037\014" +
    "\001\002\000\012\004\007\005\011\037\014\044\026\001" +
    "\002\000\020\004\ufff1\005\ufff1\022\ufff1\037\ufff1\041\ufff1" +
    "\042\ufff1\044\ufff1\001\002\000\010\004\007\005\011\037" +
    "\014\001\002\000\004\005\015\001\002\000\004\043\032" +
    "\001\002\000\010\004\007\005\011\037\014\001\002\000" +
    "\014\004\007\005\011\037\014\041\ufff0\042\ufff0\001\002" +
    "\000\012\004\007\005\011\037\014\044\035\001\002\000" +
    "\020\004\ufff2\005\ufff2\022\ufff2\037\ufff2\041\ufff2\042\ufff2" +
    "\044\ufff2\001\002\000\004\043\037\001\002\000\010\004" +
    "\007\005\011\037\014\001\002\000\014\004\007\005\011" +
    "\037\014\041\uffef\042\uffef\001\002\000\012\013\051\020" +
    "\047\025\050\032\052\001\002\000\012\013\051\020\047" +
    "\025\050\032\052\001\002\000\012\013\051\020\047\025" +
    "\050\032\052\001\002\000\012\013\051\020\047\025\050" +
    "\032\052\001\002\000\012\013\051\020\047\025\050\032" +
    "\052\001\002\000\012\013\051\020\047\025\050\032\052" +
    "\001\002\000\026\004\uffe8\005\uffe8\024\uffe8\026\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\037\uffe8\043\uffe8\001\002" +
    "\000\012\013\051\020\047\025\050\032\052\001\002\000" +
    "\026\004\uffe9\005\uffe9\024\uffe9\026\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\037\uffe9\043\uffe9\001\002\000\012\013" +
    "\051\020\047\025\050\032\052\001\002\000\022\004\uffe4" +
    "\005\uffe4\031\054\032\056\033\057\034\055\037\uffe4\043" +
    "\uffe4\001\002\000\012\013\051\020\047\025\050\032\052" +
    "\001\002\000\012\013\051\020\047\025\050\032\052\001" +
    "\002\000\012\013\051\020\047\025\050\032\052\001\002" +
    "\000\012\013\051\020\047\025\050\032\052\001\002\000" +
    "\026\004\uffeb\005\uffeb\024\uffeb\026\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\037\uffeb\043\uffeb\001\002\000\026\004" +
    "\uffec\005\uffec\024\uffec\026\uffec\031\uffec\032\uffec\033\057" +
    "\034\055\037\uffec\043\uffec\001\002\000\026\004\uffea\005" +
    "\uffea\024\uffea\026\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\037\uffea\043\uffea\001\002\000\026\004\uffed\005\uffed\024" +
    "\uffed\026\uffed\031\uffed\032\uffed\033\057\034\055\037\uffed" +
    "\043\uffed\001\002\000\026\004\uffee\005\uffee\024\uffee\026" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\037\uffee\043\uffee" +
    "\001\002\000\014\026\066\031\054\032\056\033\057\034" +
    "\055\001\002\000\026\004\uffe7\005\uffe7\024\uffe7\026\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037\uffe7\043\uffe7\001" +
    "\002\000\022\004\uffe3\005\uffe3\031\054\032\056\033\057" +
    "\034\055\037\uffe3\043\uffe3\001\002\000\022\004\uffe1\005" +
    "\uffe1\031\054\032\056\033\057\034\055\037\uffe1\043\uffe1" +
    "\001\002\000\022\004\uffe2\005\uffe2\031\054\032\056\033" +
    "\057\034\055\037\uffe2\043\uffe2\001\002\000\022\004\uffe5" +
    "\005\uffe5\031\054\032\056\033\057\034\055\037\uffe5\043" +
    "\uffe5\001\002\000\022\004\uffe6\005\uffe6\031\054\032\056" +
    "\033\057\034\055\037\uffe6\043\uffe6\001\002\000\020\011" +
    "\077\013\051\015\075\017\076\020\047\025\050\032\052" +
    "\001\002\000\004\024\104\001\002\000\004\024\103\001" +
    "\002\000\004\024\102\001\002\000\014\024\101\031\054" +
    "\032\056\033\057\034\055\001\002\000\020\004\ufff6\005" +
    "\ufff6\022\ufff6\037\ufff6\041\ufff6\042\ufff6\044\ufff6\001\002" +
    "\000\020\004\ufff7\005\ufff7\022\ufff7\037\ufff7\041\ufff7\042" +
    "\ufff7\044\ufff7\001\002\000\020\004\ufff4\005\ufff4\022\ufff4" +
    "\037\ufff4\041\ufff4\042\ufff4\044\ufff4\001\002\000\020\004" +
    "\ufff5\005\ufff5\022\ufff5\037\ufff5\041\ufff5\042\ufff5\044\ufff5" +
    "\001\002\000\004\006\106\001\002\000\012\007\111\010" +
    "\112\014\107\016\110\001\002\000\004\012\124\001\002" +
    "\000\004\012\121\001\002\000\004\012\116\001\002\000" +
    "\004\012\113\001\002\000\012\013\051\020\047\025\050" +
    "\032\052\001\002\000\014\024\115\031\054\032\056\033" +
    "\057\034\055\001\002\000\020\004\ufffa\005\ufffa\022\ufffa" +
    "\037\ufffa\041\ufffa\042\ufffa\044\ufffa\001\002\000\004\011" +
    "\117\001\002\000\004\024\120\001\002\000\020\004\ufffb" +
    "\005\ufffb\022\ufffb\037\ufffb\041\ufffb\042\ufffb\044\ufffb\001" +
    "\002\000\004\017\122\001\002\000\004\024\123\001\002" +
    "\000\020\004\ufff8\005\ufff8\022\ufff8\037\ufff8\041\ufff8\042" +
    "\ufff8\044\ufff8\001\002\000\004\015\125\001\002\000\004" +
    "\024\126\001\002\000\020\004\ufff9\005\ufff9\022\ufff9\037" +
    "\ufff9\041\ufff9\042\ufff9\044\ufff9\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\005\004\011\005\007\011\012\001\001\000\010" +
    "\004\017\005\007\011\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\015\001\001\000\002\001\001\000" +
    "\012\003\016\004\011\005\007\011\012\001\001\000\012" +
    "\004\017\005\007\010\021\011\012\001\001\000\002\001" +
    "\001\000\004\007\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\024\004\011\005\007\011\012\001" +
    "\001\000\010\004\017\005\007\011\012\001\001\000\002" +
    "\001\001\000\012\003\033\004\011\005\007\011\012\001" +
    "\001\000\004\007\030\001\001\000\002\001\001\000\012" +
    "\003\032\004\011\005\007\011\012\001\001\000\010\004" +
    "\017\005\007\011\012\001\001\000\010\004\017\005\007" +
    "\011\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\037\004\011\005\007\011\012\001\001\000\010" +
    "\004\017\005\007\011\012\001\001\000\004\006\072\001" +
    "\001\000\004\006\071\001\001\000\004\006\070\001\001" +
    "\000\004\006\067\001\001\000\004\006\066\001\001\000" +
    "\004\006\052\001\001\000\002\001\001\000\004\006\064" +
    "\001\001\000\002\001\001\000\004\006\063\001\001\000" +
    "\002\001\001\000\004\006\062\001\001\000\004\006\061" +
    "\001\001\000\004\006\060\001\001\000\004\006\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    int iden;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
        
    public Arbol getArbol() {
        return arbol;
    }

    public LinkedList<Instruccion> getAST() {
        return AST;
    }
    
    public void masIden(){
        iden++;
    }
    public void menosIden(){
        iden--;
    }

    public int getIden(){
        return this.iden;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= T_INICIO instrucciones T_FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                parser.AST=a.getInstructions();
                                Node NODERAIZ = new Node("INIT"); NODERAIZ.addSon(a.getNode());
                                parser.arbol=new Arbol(NODERAIZ);
                                //menosIden();
                                
                                
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                        RESULT=new Production(new Node("Instrucciones"), a.getInstructions());
                                        RESULT.addIns(b.getIns());
                                        RESULT.addSon(a);
                                        RESULT.addSon(b);
                                        
                                        //masIden();
                                        System.out.println("ESTOY ACA INSTRUCCIONES INSTRUCCION"+getIden());
                                        
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT=new Production(new Node("Instrucciones"), new LinkedList<>());
                            RESULT.addIns(a.getIns());
                            RESULT.addSon(a);
                            /*if(getIden()==0){
                                System.out.println("ESTOY ACAAAAAAAAAAAAAAAAAAAAA");
                            }else{
                                menosIden();
                            }*/
                            
                            
                            
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT=a;

                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= if 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT=a;
                            menosIden();
                            System.out.println("ESTOY IF "+getIden());

                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= T_INGRESAR T_ID T_COMO T_STRING T_CON_VALOR T_CADENA PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,b,"string",getIden()));
                                                                //masIden();
                                                                RESULT.addSon("ingresar");
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("como");
                                                                RESULT.addSon("cadena");
                                                                RESULT.addSon("con_valor");
                                                                RESULT.addSon(b.replace("\"", "")); 
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= T_INGRESAR T_ID T_COMO T_INT T_CON_VALOR expresion PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,(Operacion)b.getIns(),"int",getIden()));
                                                                RESULT.addSon("ingresar");
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("como");
                                                                RESULT.addSon("numero");
                                                                RESULT.addSon("con_valor");
                                                                RESULT.addSon(b); 
                                                                RESULT.addSon(";");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= T_INGRESAR T_ID T_COMO T_CARACTER T_CON_VALOR T_CHAR PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,b,"char",getIden()));
                                                                RESULT.addSon("ingresar");
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("como");
                                                                RESULT.addSon("caracter");
                                                                RESULT.addSon("con_valor");
                                                                RESULT.addSon(b); 
                                                                RESULT.addSon(";");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= T_INGRESAR T_ID T_COMO T_BOOLEAN T_CON_VALOR T_VALOR_BOOL PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,b,"bool",getIden()));
                                                                RESULT.addSon("ingresar");
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("como");
                                                                RESULT.addSon("boolean");
                                                                RESULT.addSon("con_valor");
                                                                RESULT.addSon(b); 
                                                                RESULT.addSon(";");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= T_ID T_ASIG T_CADENA PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,b,"asig",getIden()));
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("->");
                                                                RESULT.addSon(b.replace("\"", "")); 
                                                                RESULT.addSon(";");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= T_ID T_ASIG expresion PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,(Operacion)b.getIns(),"asig",getIden()));
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("->");
                                                                RESULT.addSon(b); 
                                                                RESULT.addSon(";");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= T_ID T_ASIG T_CHAR PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,b,"asig",getIden()));
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("->");
                                                                RESULT.addSon(b); 
                                                                RESULT.addSon(";");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= T_ID T_ASIG T_VALOR_BOOL PTCOMA 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                RESULT = new Production(new Node("Declaracion"),  new Declaracion(a,b,"asig",getIden()));
                                                                RESULT.addSon(a);
                                                                RESULT.addSon("->");
                                                                RESULT.addSon(b); 
                                                                RESULT.addSon(";");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= T_SI expresion_relacional instrucciones T_FIN_SI 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                                RESULT=new Production(new Node("Instruccion"), new If((Operacion)a.getIns(), b.getInstructions(),getIden()));
                                                                                                                                //masIden();
                                                                                                                                RESULT.addSon("si");
                                                                                                                                
                                                                                                                                RESULT.addSon(a);
                                                                                                                                
                                                                                                                                
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                                
                                                                                                                                
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= T_SI expresion_relacional instrucciones else_ifs T_CONTRARIO instrucciones T_FIN_SI 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                                RESULT=new Production(new Node("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),c.getInstructions(),getIden()));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                
                                                                                                                                RESULT.addSon(a);
                                                                                                                              
                                                                                                                                
                                                                                                                                RESULT.addSon(b);
                                                                                                                                
                                                                                                                                RESULT.addSon(l);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                                //masIden();
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= T_SI expresion_relacional instrucciones T_CONTRARIO instrucciones T_FIN_SI 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                                RESULT=new Production(new Node("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),c.getInstructions(),getIden()));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                
                                                                                                                                RESULT.addSon(a);
                                                                                                                                
                                                                                                                                
                                                                                                                                RESULT.addSon(b);
                                                                                                                                
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                                //masIden();
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // else_ifs ::= else_ifs T_O_SI expresion_relacional T_ENTONCES instrucciones 
            {
              Production RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production l = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                                                RESULT=new Production(new Node("ELSE_IFS"), l.getInstructions());
                                                                                                                                RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(),getIden()));
                                                                                                                                RESULT.addSon(l);
                                                                                                                                RESULT.addSon("o_si");
                                                                                                                                
                                                                                                                                RESULT.addSon(a);
                                                                                                                                
                                                                                                                                RESULT.addSon("entonces");
                                                                                                                                RESULT.addSon(b);
                                                                                                                                
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // else_ifs ::= T_O_SI expresion_relacional T_ENTONCES instrucciones 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                                                RESULT=new Production(new Node("ELSE_IFS"), new LinkedList<>());
                                                                                                                                RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(),getIden()));
                                                                                                                                RESULT.addSon("o_si");
                                                                                                                                
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon("entonces");
                                                                                                                                RESULT.addSon(b);
                                                                                                                                
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= MENOS expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(a);                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion MAS expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("+");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion MENOS expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion POR expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("*");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion DIVIDIDO expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("/");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= T_ENTERO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= T_FLOAT 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= PARIZQ expresion PARDER 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Production(new Node("Expresion"), a.getIns());
                                                    RESULT.addSon("(");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(")");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_relacional ::= T_ID MAYQUE expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion(a,(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(">");
                                                    RESULT.addSon(b);
                                                    masIden();
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_relacional ::= T_ID MENQUE expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion(a,(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("<");
                                                    RESULT.addSon(b);
                                                    masIden();
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_relacional ::= T_ID T_MAYIG expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion(a,(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYIG));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(">=");
                                                    RESULT.addSon(b);
                                                    masIden();
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_relacional ::= T_ID T_MNIG expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion(a,(Operacion)b.getIns(), Operacion.Tipo_operacion.MNIG));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("<=");
                                                    RESULT.addSon(b);
                                                    masIden();
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_relacional ::= T_ID T_IGUAL expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion(a,(Operacion)b.getIns(), Operacion.Tipo_operacion.ES_IGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("=");
                                                    RESULT.addSon(b);
                                                    masIden();
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_relacional ::= T_ID T_DIFE expresion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Expresion_Relacional"), new Operacion(a,(Operacion)b.getIns(), Operacion.Tipo_operacion.ES_DIFERENTE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("!=");
                                                    RESULT.addSon(b);
                                                    masIden();
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
